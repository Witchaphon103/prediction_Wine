import streamlit as st
import numpy as np
import pandas as pd
import joblib
import matplotlib.pyplot as plt

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ scaler
model = joblib.load("./best_wine_quality_model.pkl")
scaler = joblib.load("./scaler.pkl")

# ‡πÇ‡∏´‡∏•‡∏î CSV ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
file_path = "./winequality-red.csv"
df = pd.read_csv(file_path)

# ------------------------- UI Styling -------------------------
st.set_page_config(page_title="Wine Quality Predictor", page_icon="üç∑", layout="wide")

# ------------------------- Header -------------------------
st.markdown("<h1>üç∑ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå</h1>", unsafe_allow_html=True)
st.markdown("<h3>üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡πÄ‡∏Ñ‡∏°‡∏µ</h3>", unsafe_allow_html=True)

# ------------------------- Layout -------------------------
col1, col2 = st.columns([1, 1])  # ‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡∏ß‡∏≤)

# ------------------------- Column 1: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV -------------------------
with col1:
    st.markdown("## üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡∏ô‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV")
    st.dataframe(df.head(10))  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å

    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    st.markdown("### üìà ‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.write(df.describe())

# ------------------------- Column 2: Prediction Form -------------------------
with col2:
    st.markdown("## üß™ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå")
    
    with st.container():
        col1, col2 = st.columns(2)

        with col1:
            fixed_acidity = st.number_input("Fixed Acidity (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)", min_value=0.0, step=0.1)
            volatile_acidity = st.number_input("Volatile Acidity (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î‡∏£‡∏∞‡πÄ‡∏´‡∏¢)", min_value=0.0, step=0.01)
            citric_acid = st.number_input("Citric Acid (‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏î‡∏ã‡∏¥‡∏ï‡∏£‡∏¥‡∏Å)", min_value=0.0, step=0.01)
            residual_sugar = st.number_input("Residual Sugar (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á)", min_value=0.0, step=0.1)
            chlorides = st.number_input("Chlorides (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏≠‡πÑ‡∏£‡∏î‡πå)", min_value=0.0, step=0.001)
            free_sulfur_dioxide = st.number_input("Free Sulfur Dioxide (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå‡∏≠‡∏¥‡∏™‡∏£‡∏∞)", min_value=0.0, step=1.0)

        with col2:
            total_sulfur_dioxide = st.number_input("Total Sulfur Dioxide (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)", min_value=0.0, step=1.0)
            density = st.number_input("Density (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô)", min_value=0.0, step=0.0001)
            pH = st.number_input("pH (‡∏Ñ‡πà‡∏≤‡∏û‡∏µ‡πÄ‡∏≠‡∏ä)", min_value=0.0, step=0.01)
            sulphates = st.number_input("Sulphates (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï)", min_value=0.0, step=0.01)
            alcohol = st.number_input("Alcohol (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå)", min_value=0.0, step=0.1)

    # ------------------------- Predict Button -------------------------
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå"):
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
        input_data = np.array([[fixed_acidity, volatile_acidity, citric_acid, residual_sugar, chlorides,
                                free_sulfur_dioxide, total_sulfur_dioxide, density, pH, sulphates, alcohol]])
        input_scaled = scaler.transform(input_data)

        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        prediction = model.predict(input_scaled)[0]
        probability = model.predict_proba(input_scaled)[0]

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û (1-10)
        quality_score = int(probability[1] * 10)

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏µ
        if prediction == 1:
            result_text = f"üç∑ <b>‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á!</b> (‡∏£‡∏∞‡∏î‡∏±‡∏ö: {quality_score}/10)"
            result_color = "#90EE90"
            st.balloons()
        else:
            result_text = f"‚ö†Ô∏è <b>‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥</b> (‡∏£‡∏∞‡∏î‡∏±‡∏ö: {10 - quality_score}/10)"
            result_color = "#ff6666"
            st.snow()

        # ------------------------- Show Result -------------------------
        st.markdown(
            f"""
            <div style='padding: 20px; background-color: {result_color}; color: black; border-radius: 10px; text-align: center;'>
                <h2>{result_text}</h2>
            </div>
            """,
            unsafe_allow_html=True
        )

# ------------------------- LINE Chatbot Button -------------------------
st.markdown("<br>", unsafe_allow_html=True)

st.markdown(
    """
    <style>
        .line-button {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .line-button a {
            background-color: #06C755;
            color: white;
            padding: 15px 30px;
            font-size: 20px;
            font-weight: bold;
            text-decoration: none;
            border-radius: 10px;
            transition: 0.3s ease-in-out;
            display: inline-block;
        }
        .line-button a:hover {
            background-color: #04a145;
            transform: scale(1.05);
        }
    </style>
    <div class="line-button">
        <a href="https://line.me/R/ti/p/@777xzgmw" target="_blank">üí¨ ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö LINE Bot</a>
    </div>
    """,
    unsafe_allow_html=True
)
